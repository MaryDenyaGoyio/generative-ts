[Inference (q)]

x (T,B,x_dim)
  └─phi_x: Lin(x_dim→h_dim)→ReLU→Lin(h_dim→h_dim)→ReLU ─▶ φ_x (T,B,h_dim)

h_{t-1} (T,B,h_dim)   // 재귀코어에서 시간별로 제공 (아래 [Recurrent Core] 참고)
  φ_x ⊕ h_{t-1}  ───────────────────────────────────▶ u (T,B,h_dim + h_dim)

u (T,B,2·h_dim)
  └─enc_body: Lin(2·h_dim→h_dim)→ReLU→Lin(h_dim→h_dim)→ReLU ─▶ e (T,B,h_dim)
      ├─head_mu_q:     Lin(h_dim→z_dim) ────────────▶ μ_q (T,B,z_dim)
      └─head_preσ_q:   Lin(h_dim→z_dim)─softplus─+eps ─▶ σ_q (T,B,z_dim)


[Prior (pr)]

h_{t-1} (T,B,h_dim)
  └─prior_body: Lin(h_dim→h_dim)→ReLU ──────────────▶ p (T,B,h_dim)
      ├─head_mu_p:     Lin(h_dim→z_dim) ───────────▶ μ_p (T,B,z_dim)
      └─head_preσ_p:   Lin(h_dim→z_dim)─softplus─+eps ─▶ σ_p (T,B,z_dim)


[Generation (p)]

z (T,B,z_dim)
  └─phi_z: Lin(z_dim→h_dim)→ReLU ───────────────────▶ φ_z (T,B,h_dim)

φ_z ⊕ h_{t-1}  ──────────────────────────────────────▶ d_in (T,B,h_dim + h_dim)

d_in (T,B,2·h_dim)
  └─dec_body: Lin(2·h_dim→h_dim)→ReLU→Lin(h_dim→h_dim)→ReLU ─▶ d (T,B,h_dim)
      ├─head_mu_x:     Lin(h_dim→x_dim)→Sigmoid ───▶ μ_x (T,B,x_dim)
      └─head_preσ_x:   Lin(h_dim→x_dim)─softplus─+eps ─▶ σ_x (T,B,x_dim)




[Recurrent]

Input: φ_x(x_t) (B,h_dim),   φ_z(z_t) (B,h_dim)  → concat → (B,2·h_dim)

GRU: GRU(input_size=2·h_dim, hidden_size=h_dim, num_layers=n_layers, bias=False)

Update: h_{t} = GRU([φ_x(x_t) ⊕ φ_z(z_t)], h_{t-1})        // (B,h_dim)




[Heads (VRNN / VRNN_ts)]

Inference (q):
  input:  encoder (T,B,h_dim)
  heads:
    mu_q        = Lin(h_dim→z_dim)                   // (T,B,z_dim)
    pre_sigma_q = Lin(h_dim→z_dim)                   // (T,B,z_dim)
    sigma_q     = softplus(pre_sigma_q) + 1e-5       // (T,B,z_dim)

Prior (pr):
  input:  prior (T,B,h_dim)
  heads:
    mu_p        = Lin(h_dim→z_dim)                   // (T,B,z_dim)
    pre_sigma_p = Lin(h_dim→z_dim)                   // (T,B,z_dim)
    sigma_p     = softplus(pre_sigma_p) + 1e-5       // (T,B,z_dim)

Generation (p):
  input:  decoder (T,B,h_dim)
  heads:
    mu_x        = Sigmoid(Lin(h_dim→x_dim))          // (T,B,x_dim)
    pre_sigma_x = Lin(h_dim→x_dim)                   // (T,B,x_dim)
    sigma_x     = softplus(pre_sigma_x) + 1e-5       // (T,B,x_dim)
